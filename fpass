#!/usr/bin/env bash
orig_location="$PWD"

function comma_join() {
  local IFS=","
  echo "$*"
}

# read arguments
OPTS=hnpPk:
LONGOPTS=help,no-exit,pull,push,hook:
PARSED=$(getopt --options=$OPTS --longoptions=$LONGOPTS --name "$0" -- "$@")
eval set -- "$PARSED"
no_exit=0 git_pull=0 git_push=0
while true; do case "$1" in
  -h | --help )
    echo $help
    exit
    ;;
  -n | --no-exit )
    no_exit=1
    ;;
  -p | --pull )
    git_pull=1
    ;;
  -P | --push )
    git_push=1
    ;;
  -k | --hook )
    shift
    hook="$1"
    ;;
  -- )
    shift
    break
    ;;
esac; shift; done

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"

HEADER="Copy: Ctrl + [U]rl, [L]ogin, [P]assword, [A]ll\nCopy: Enter - password\nAdd: Ctrl + [G]enerate, [A]dd empty\nModify: Ctrl + [D]elete, [E]dit, [R]ename\nShow password: Ctrl + [S]how\n"
PASSWORD_STORE=${PASSWORD_STORE_DIR-~/.password-store}
cd "$PASSWORD_STORE"

inside_git_repo="$(git rev-parse --is-inside-work-tree 2>/dev/null)"
if [[ $inside_git_repo ]]; then
  files_cmd="git ls-tree -r --name-only HEAD | grep \.gpg$"
else
  files_cmd="find -name '*.gpg' | sed -e 's/\.\///'"
  git_pull=0
  git_push=0
fi
pass_parser="${DIR}/pass-parser"

function pass_edit() {
  pass edit "$1"
}

function pass_generate() {
  echo "Generate new password"
  read -p "Password name/path: " password_name
  [[ -z "$password_name" ]] && return 1
  read -p "Password length [20]: " password_length
  password_length=${password_length:-20}
  read -p "Include symbols [Y/n]: " symbols
  if [[ ${symbols:-y} =~ '^[^yY]' ]]; then no_symbols="--no_symbols"; else no_symbols=""; fi
  pass generate $no_symbols "$password_name" "$password_length"
  local success=$?
  if [[ $success -eq 0 ]]; then 
    pass edit "$password_name"
  fi
  return $success
}

function pass_rename() {
  echo "Rename password"
  echo "Old name/path: $1"
  read -p "New name/path: " -e -i "$1"
  [[ -z "$REPLY" ]] && return 1
  pass mv "$1" "$REPLY"
}

function pass_empty() {
  echo "Generate new empty password"
  read -p "Password name/path: "
  [[ -z "$REPLY" ]] && return 1
  pass edit "$REPLY"
}

function pass_delete() {
  pass rm "$selected"
}

declare -A options
options["ctrl-g"]="pass_generate"
options["ctrl-a"]="pass_empty"
options["ctrl-d"]="pass_delete"
options["ctrl-e"]="pass_edit"
options["ctrl-r"]="pass_rename"

[[ $git_pull -eq 1 ]] && pass git pull
while :
do
  clear
  mapfile -t outputs < \
  <(( echo -e $HEADER; eval "$files_cmd" | sed -e 's/\.gpg//' | sort) | \
    fzf \
    --reverse \
    --header-lines=5 \
    --no-multi \
    --print-query \
    --expect=`comma_join "${!options[@]}"` \
    --query="$query" \
    --prompt='pass > ' \
    --bind 'esc:cancel' \
    --bind 'ctrl-s:toggle-preview' \
    --bind "ctrl-l:execute-silent($pass_parser {} login)+execute-silent($hook)" \
    --bind "ctrl-u:execute-silent($pass_parser {} url)+execute-silent($hook)" \
    --bind "ctrl-p:execute-silent($pass_parser {} password)+execute-silent($hook)" \
    --bind "ctrl-a:execute-silent($pass_parser {} all)+execute-silent($hook)" \
    --bind "enter:execute-silent($pass_parser {} password)+execute-silent($hook)" \
    --preview 'pass {}' \
    --preview-window=down:50%:hidden
  )
  if [[ ${#outputs[@]} -eq 0 ]] && [[ $no_exit -eq 0 ]]; then
    exit
  fi
  query="${outputs[0]}"
  cmd="${outputs[1]}"
  selected="${outputs[2]}"
  # echo cmd $cmd
  # echo query $query
  # echo selected $selected
  # echo ${outputs[@]}
  # echo ${#outputs[@]}
  ${options["$cmd"]} "$selected"
  if [[ $? -eq 0 ]] && [[ $git_push -eq 1 ]]; then pass git push; fi
done
cd "$orig_location"
