#!/bin/bash
orig_location="$PWD"

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"

HEADER="Copy: Ctrl + [U]rl, [L]ogin, [P]assword, [A]ll\nCopy: Enter - password\nAdd: Ctrl + [G]enerate, emp[T]y\nModify: Ctrl + [D]elete, [E]dit, [R]ename"
PASSWORD_STORE=${PASSWORD_STORE_DIR-~/.password-store}
cd "$PASSWORD_STORE"

files_cmd="git ls-tree -r --name-only HEAD"
pass_parser="${DIR}/pass-parser"
pass_editor="${DIR}/add_template"

return_code=0
while [ $return_code -eq 0 ]
do
  clear
  outputs=($((
    echo -e $HEADER
    $files_cmd | grep \.gpg$ | sed -e 's/\.gpg//' | sort
  ) | \
    fzf \
    --reverse \
    --color=info:17 \
    --header-lines=4 \
    --no-multi \
    --prompt='pass > ' \
    --bind 'esc:cancel' \
    --bind "ctrl-l:execute-silent($pass_parser {} login)" \
    --bind "ctrl-u:execute-silent($pass_parser {} url)" \
    --bind "ctrl-p:execute-silent($pass_parser {} password)" \
    --bind "ctrl-a:execute-silent($pass_parser {} all)" \
    --bind "enter:execute-silent($pass_parser {} password)" \
    --bind 'ctrl-g:execute(echo generate)+accept' \
    --bind 'ctrl-t:execute(echo empty)+accept' \
    --bind 'ctrl-d:execute(echo delete)+accept' \
    --bind 'ctrl-e:execute(echo edit)+accept' \
    --bind 'ctrl-r:execute(echo rename)+accept' \
    --preview 'pass {}'
      ))
  return_code=$?
  cmd=${outputs[0]}
  selected=${outputs[@]:1}
  # echo cmd $cmd
  # echo selected $selected
  # exit
  case $cmd in
    edit )
      pass edit "$selected"
      ;;
    generate )
      echo "Generate new password"
      read -p "Password name/path  : " password_name
      [[ -z "$password_name" ]] && continue
      read -p "Password length[20] : " password_length
      password_length=${password_length:-20}
      read -p "Include symbols[Y/n]: " symbols
      case ${symbols:-y} in
        [yY]* )
          pass generate "$password_name" "$password_length"
          ;;
        * )
          pass generate --no-symbols "$password_name" "$password_length"
          ;;
      esac
      [[ $? -eq 0 ]] && EDITOR=$pass_editor pass edit "$password_name"
      ;;
    rename )
      echo "Rename password"
      echo Old name/path: $selected
      read -p "New name/path: " -e -i "$selected"
      [[ -z "$REPLY" ]] && continue
      pass mv "$selected" "$REPLY"
      ;;
    empty )
      echo "Generate new empty password"
      read -p "Password name/path: "
      [[ -z "$REPLY" ]] && continue
      pass edit "$REPLY"
      ;;
    delete )
      pass rm "$selected"
      ;;
    * )
      exit 1
      ;;
  esac
done
cd "$orig_location"
